--- linux-5.4.41/drivers/mmc/host/sdhci.c	2020-05-14 01:58:30.000000000 -0400
+++ linux/drivers/mmc/host/sdhci.c	2020-05-17 00:58:23.976574380 -0400
@@ -198,32 +198,44 @@
 void sdhci_reset(struct sdhci_host *host, u8 mask)
 {
 	ktime_t timeout;
+	//printk("calling sdhci_reset\n");
+	if(host->ami_quirks & SDHCI_AMI_QUIRK_NO_SOFTWARE_RESET)
+	{
+		if (mask & SDHCI_RESET_ALL)
+			host->clock = 0;
+	}
+	else
+	{
+	///	printk("calling sdhci_reset  pass1\n");
+		sdhci_writeb(host, mask, SDHCI_SOFTWARE_RESET);
+	//	printk("calling sdhci_reset  pass2\n");
+		if (mask & SDHCI_RESET_ALL) {
+			host->clock = 0;
+			/* Reset-all turns off SD Bus Power */
+			if (host->quirks2 & SDHCI_QUIRK2_CARD_ON_NEEDS_BUS_ON)
+				sdhci_runtime_pm_bus_off(host);
+		}
+	//printk("calling sdhci_reset  pass3\n");
+		/* Wait max 100 ms */
+		timeout = ktime_add_ms(ktime_get(), 100);
 
-	sdhci_writeb(host, mask, SDHCI_SOFTWARE_RESET);
+		/* hw clears the bit when it's done */
+		while (1) {
+			//bool timedout = ktime_after(ktime_get(), timeout);
 
-	if (mask & SDHCI_RESET_ALL) {
-		host->clock = 0;
-		/* Reset-all turns off SD Bus Power */
-		if (host->quirks2 & SDHCI_QUIRK2_CARD_ON_NEEDS_BUS_ON)
-			sdhci_runtime_pm_bus_off(host);
+			if (!(sdhci_readb(host, SDHCI_SOFTWARE_RESET) & mask))
+				break;
+		//	printk("calling sdhci_reset  pass3\n");
+			//if (timedout) {
+			if (timeout) {
+				pr_err("%s: Reset 0x%x never completed.\n",
+					mmc_hostname(host->mmc), (int)mask);
+				sdhci_dumpregs(host);
+				return;
+			}
+			timeout--;
+			udelay(10);
 	}
-
-	/* Wait max 100 ms */
-	timeout = ktime_add_ms(ktime_get(), 100);
-
-	/* hw clears the bit when it's done */
-	while (1) {
-		bool timedout = ktime_after(ktime_get(), timeout);
-
-		if (!(sdhci_readb(host, SDHCI_SOFTWARE_RESET) & mask))
-			break;
-		if (timedout) {
-			pr_err("%s: Reset 0x%x never completed.\n",
-				mmc_hostname(host->mmc), (int)mask);
-			sdhci_dumpregs(host);
-			return;
-		}
-		udelay(10);
 	}
 }
 EXPORT_SYMBOL_GPL(sdhci_reset);
@@ -1020,11 +1032,15 @@
 static void sdhci_prepare_data(struct sdhci_host *host, struct mmc_command *cmd)
 {
 	struct mmc_data *data = cmd->data;
+	uint32_t reg;
 
 	host->data_timeout = 0;
-
-	if (sdhci_data_line_cmd(cmd))
-		sdhci_set_timeout(host, cmd);
+	
+	if(!(host->ami_quirks & SDHCI_AMI_QUIRK_NO_TIMEOUT_CNTL_REG))
+	{
+		if (sdhci_data_line_cmd(cmd))
+			sdhci_set_timeout(host, cmd);
+	}
 
 	if (!data)
 		return;
@@ -1124,10 +1140,22 @@
 	}
 
 	sdhci_set_transfer_irqs(host);
-
-	/* Set the DMA boundary value and block size */
-	sdhci_writew(host, SDHCI_MAKE_BLKSZ(host->sdma_boundary, data->blksz),
-		     SDHCI_BLOCK_SIZE);
+	if(host->ami_quirks & SDHCI_AMI_QUIRK_BROKEN_BLK_CNTL_REG)
+	{
+		/* We do not handle DMA boundaries, so set it to max (512 KiB)*/ 
+		reg = ioread32(host->ioaddr + SDHCI_BLOCK_SIZE);
+		reg &= ~(0x1FFFFF); /* clear bits[20:0] */
+		reg |= (data->blksz & 0xFFF);
+		if (data->blocks != 512)
+			reg |= (data->blocks << 12);
+		iowrite32(reg, host->ioaddr + SDHCI_BLOCK_SIZE);
+	}
+	else
+	{
+		/* Set the DMA boundary value and block size */
+		sdhci_writew(host, SDHCI_MAKE_BLKSZ(host->sdma_boundary, data->blksz),
+			     SDHCI_BLOCK_SIZE);
+	}
 
 	/*
 	 * For Version 4.10 onwards, if v4 mode is enabled, 32-bit Block Count
@@ -1358,15 +1386,21 @@
 
 	/* Wait max 10 ms */
 	timeout = 10;
-
-	mask = SDHCI_CMD_INHIBIT;
-	if (sdhci_data_line_cmd(cmd))
-		mask |= SDHCI_DATA_INHIBIT;
-
-	/* We shouldn't wait for data inihibit for stop commands, even
-	   though they might use busy signaling */
-	if (cmd->mrq->data && (cmd == cmd->mrq->data->stop))
-		mask &= ~SDHCI_DATA_INHIBIT;
+	if(host->ami_quirks & SDHCI_AMI_QUIRK_INHIBIT_ABSENT)
+	{
+		mask = SDHCI_DOING_WRITE | SDHCI_DOING_READ;
+	}
+	else
+	{
+		mask = SDHCI_CMD_INHIBIT;
+		if (sdhci_data_line_cmd(cmd))
+			mask |= SDHCI_DATA_INHIBIT;
+
+		/* We shouldn't wait for data inihibit for stop commands, even
+		   though they might use busy signaling */
+		if (cmd->mrq->data && (cmd == cmd->mrq->data->stop))
+			mask &= ~SDHCI_DATA_INHIBIT;
+	}
 
 	while (sdhci_readl(host, SDHCI_PRESENT_STATE) & mask) {
 		if (timeout == 0) {
@@ -1386,6 +1420,7 @@
 		WARN_ON(host->data_cmd);
 		host->data_cmd = cmd;
 	}
+	host->busy_handle = 0;
 
 	sdhci_prepare_data(host, cmd);
 
@@ -1409,7 +1444,19 @@
 		flags = SDHCI_CMD_RESP_SHORT_BUSY;
 	else
 		flags = SDHCI_CMD_RESP_SHORT;
-
+	
+	if(host->ami_quirks & SDHCI_AMI_QUIRK_RSP_136_IGN_CRC_ERR)
+	{
+		/* Some SoC SDHC generates CRC error with 136-bit response */
+		if ((cmd->flags & MMC_RSP_CRC) && !(cmd->flags & MMC_RSP_136)) 
+			flags |= SDHCI_CMD_CRC;
+	}
+	else
+	{
+		if (cmd->flags & MMC_RSP_CRC) 
+			flags |= SDHCI_CMD_CRC;
+	}
+	
 	if (cmd->flags & MMC_RSP_CRC)
 		flags |= SDHCI_CMD_CRC;
 	if (cmd->flags & MMC_RSP_OPCODE)
@@ -1429,7 +1476,15 @@
 		timeout += 10 * HZ;
 	sdhci_mod_timer(host, cmd->mrq, timeout);
 
-	sdhci_writew(host, SDHCI_MAKE_CMD(cmd->opcode, flags), SDHCI_COMMAND);
+	if(host->ami_quirks & SDHCI_AMI_QUIRK_RSP_136_ONLY)
+	{
+		sdhci_writew(host, SDHCI_MAKE_CMD(cmd->opcode, flags), SDHCI_COMMAND);
+		sdhci_writew(host, SDHCI_MAKE_CMD(cmd->opcode, flags) | 0x8000, SDHCI_COMMAND);
+	}
+	else
+	{
+		sdhci_writew(host, SDHCI_MAKE_CMD(cmd->opcode, flags), SDHCI_COMMAND);
+	}
 }
 EXPORT_SYMBOL_GPL(sdhci_send_command);
 
@@ -1456,14 +1511,30 @@
 static void sdhci_finish_command(struct sdhci_host *host)
 {
 	struct mmc_command *cmd = host->cmd;
-
+	int i;
 	host->cmd = NULL;
-
-	if (cmd->flags & MMC_RSP_PRESENT) {
-		if (cmd->flags & MMC_RSP_136) {
-			sdhci_read_rsp_136(host, cmd);
-		} else {
-			cmd->resp[0] = sdhci_readl(host, SDHCI_RESPONSE);
+	if(!(host->ami_quirks & SDHCI_AMI_QUIRK_RSP_136_ONLY))
+	{
+		if (cmd->flags & MMC_RSP_PRESENT) {
+			if (cmd->flags & MMC_RSP_136) {
+				sdhci_read_rsp_136(host, cmd);
+			} else {
+				cmd->resp[0] = sdhci_readl(host, SDHCI_RESPONSE);
+			}
+		}
+	}
+	else
+	{
+		if (host->cmd->flags & MMC_RSP_PRESENT) {
+			if (host->cmd->flags & MMC_RSP_136) {
+				/* CRC is stripped so we need to do some shifting. */
+				for (i = 0;i < 4;i++) {
+					host->cmd->resp[i] = readl(host->ioaddr + SDHCI_RESPONSE + (3-i)*4);
+				}
+				host->cmd->resp[3] &= 0xFFFFFF00;
+			} else {
+				host->cmd->resp[0] = readl(host->ioaddr + SDHCI_RESPONSE + 4);
+			}
 		}
 	}
 
@@ -1484,8 +1555,9 @@
 		if (cmd->data) {
 			DBG("Cannot wait for busy signal when also doing a data transfer");
 		} else if (!(host->quirks & SDHCI_QUIRK_NO_BUSY_IRQ) &&
-			   cmd == host->data_cmd) {
+			   cmd == host->data_cmd && !host->busy_handle) {
 			/* Command complete before busy is ended */
+			host->busy_handle=1;
 			return;
 		}
 	}
@@ -3785,6 +3857,9 @@
 		host->flags &= ~SDHCI_USE_ADMA;
 	}
 
+#ifdef CONFIG_SPX_FEATURE_GLOBAL_DISABLE_SDHCI_DMA
+	host->flags &= ~(SDHCI_USE_ADMA | SDHCI_USE_SDMA);
+#endif
 	if (sdhci_can_64bit_dma(host))
 		host->flags |= SDHCI_USE_64_BIT_DMA;
 
--- linux-5.4.41/drivers/mmc/host/sdhci.h	2020-05-14 01:58:30.000000000 -0400
+++ linux/drivers/mmc/host/sdhci.h	2020-05-17 01:00:50.255505237 -0400
@@ -520,6 +520,16 @@
 #define SDHCI_SIGNALING_180	(1<<15)	/* Host is capable of 1.8V signaling */
 #define SDHCI_SIGNALING_120	(1<<16)	/* Host is capable of 1.2V signaling */
 
+	unsigned int ami_quirks; /* More deviations from spec*/
+
+#define SDHCI_AMI_QUIRK_NO_SOFTWARE_RESET (1<<0)
+#define SDHCI_AMI_QUIRK_INHIBIT_ABSENT (1<<1)
+#define SDHCI_AMI_QUIRK_RSP_136_IGN_CRC_ERR (1<<2)
+#define SDHCI_AMI_QUIRK_RSP_136_ONLY (1<<3)
+#define SDHCI_AMI_QUIRK_NO_TIMEOUT_CNTL_REG (1<<4)
+#define SDHCI_AMI_QUIRK_BROKEN_BLK_CNTL_REG (1<<5)
+
+
 	unsigned int version;	/* SDHCI spec. version */
 
 	unsigned int max_clk;	/* Max possible freq (MHz) */
@@ -541,6 +551,7 @@
 	struct mmc_command *data_cmd;	/* Current data command */
 	struct mmc_data *data;	/* Current data request */
 	unsigned int data_early:1;	/* Data finished before cmd */
+	unsigned int busy_handle:1;     /* Handling the order of Busy-end */
 
 	struct sg_mapping_iter sg_miter;	/* SG state for PIO */
 	unsigned int blocks;	/* remaining PIO blocks */
