diff -Naur uboot/include/net.h uboot_new/include/net.h
--- uboot/include/net.h	2021-01-04 10:19:46.892390979 +0530
+++ uboot_new/include/net.h	2021-01-04 10:47:59.616522185 +0530
@@ -860,6 +860,10 @@
 #ifdef CONFIG_SPX_FEATURE_WRITE_MAC_TO_EEPROM_SUPPORT
 	void ast_eth_read_addr_from_eeprom(int id);
 #endif
+#ifdef CONFIG_SPX_FEATURE_WRITE_MAC_TO_FRU_SUPPORT
+       void ast_eth_read_addr_from_fru(int id);
+#endif
+
 /**
  * update_tftp - Update firmware over TFTP (via DFU)
  *
diff -Naur uboot/net/eth-uclass.c uboot_new/net/eth-uclass.c
--- uboot/net/eth-uclass.c	2021-01-04 10:19:46.860391220 +0530
+++ uboot_new/net/eth-uclass.c	2021-01-04 10:50:04.864072142 +0530
@@ -500,6 +500,9 @@
 #ifdef CONFIG_SPX_FEATURE_WRITE_MAC_TO_EEPROM_SUPPORT
 	ast_eth_read_addr_from_eeprom(dev->seq);
 #endif
+#ifdef CONFIG_SPX_FEATURE_WRITE_MAC_TO_FRU_SUPPORT
+       ast_eth_read_addr_from_fru(dev->seq);	
+#endif
 	eth_env_get_enetaddr_by_index("eth", dev->seq, env_enetaddr);
 	if (!is_zero_ethaddr(env_enetaddr)) {
 		if (!is_zero_ethaddr(pdata->enetaddr) &&
diff -Naur uboot/oem/ami/mac_eeprom/macto_eeprom.c uboot_new/oem/ami/mac_eeprom/macto_eeprom.c
--- uboot/oem/ami/mac_eeprom/macto_eeprom.c	2021-01-04 10:19:46.924390739 +0530
+++ uboot_new/oem/ami/mac_eeprom/macto_eeprom.c	2021-01-04 10:51:33.654233916 +0530
@@ -9,7 +9,7 @@
 
 
 
-#ifdef CONFIG_SPX_FEATURE_WRITE_MAC_TO_EEPROM_SUPPORT
+#if defined(CONFIG_SPX_FEATURE_WRITE_MAC_TO_EEPROM_SUPPORT) || defined(CONFIG_SPX_FEATURE_WRITE_MAC_TO_FRU_SUPPORT)
 extern struct udevice *i2c_cur_bus;
 extern int cmd_i2c_set_bus_num(unsigned int busnum);
 extern int i2c_get_cur_bus_chip(uint chip_addr, struct udevice **devp);
@@ -31,6 +31,8 @@
 
 	return 0;
 }
+#endif
+#ifdef CONFIG_SPX_FEATURE_WRITE_MAC_TO_EEPROM_SUPPORT
 
 void ast_eth_read_addr_from_eeprom(int id)
 {
@@ -105,3 +107,319 @@
 
 
 #endif
+#ifdef CONFIG_SPX_FEATURE_WRITE_MAC_TO_FRU_SUPPORT
+
+#define FRU_SIZE                      512
+#define ETH_ALEN_IN_BOARDEXTRA                17 /* 17 characters like 12:45:78:AB:DE:12 */
+#define BUF2STR_MAXIMUM_OUTPUT_SIZE   (3 * 1024 + 1)
+#define CONFIG_SPX_FEATURE_I2C_FRU_CHANNEL_ID 0x3
+
+struct fru_header_t {
+      uint8_t version;
+      union {
+              struct {
+                      uint8_t internal;
+                      uint8_t chassis;
+                      uint8_t board;
+                      uint8_t product;
+                      uint8_t multi;
+              } offset;
+              uint8_t offsets[5];
+      };
+      uint8_t pad;
+      uint8_t checksum;
+}__attribute__ ((packed));
+
+static void hex2dec(uint8_t *buffer, int len)
+{
+      int i;
+
+      for (i = 0; i < len; i++) {
+              if (buffer[i] >= 'a')
+                      buffer[i] -= 'a' - 10;
+              else if (buffer[i] >= 'A')
+                      buffer[i] -= 'A' - 10;
+              else if (buffer[i] >= '0')
+                      buffer[i] -= '0';
+      }
+}
+static const char * buf2str_extended(const char *buf, int len, const char *sep)
+{
+      static char str[BUF2STR_MAXIMUM_OUTPUT_SIZE];
+      char *cur;
+      int i;
+      int sz;
+      int left;
+      int sep_len;
+
+      if (buf == NULL) {
+              snprintf(str, sizeof(str), "<NULL>");
+              return (const char *)str;
+      }
+
+      cur = str;
+      left = sizeof(str);
+
+      if (sep)
+              sep_len = strlen(sep);
+      else
+              sep_len = 0;
+
+      for (i = 0; i < len; i++) {
+              /* may return more than 2, depending on locale */
+              sz = snprintf(cur, left, "%2.2x", buf[i]);
+              if (sz >= left) {
+                      /* buffer overflow, truncate */
+                      break;
+              }
+              cur += sz;
+              left -= sz;
+              /* do not write separator after last byte */
+              if (sep && i != (len - 1)) {
+                      if (sep_len >= left)
+                              break;
+                      strncpy(cur, sep, left - sz);
+                      cur += sep_len;
+                      left -= sep_len;
+              }
+      }
+      *cur = '\0';
+
+      return (const char *)str;
+}
+
+static const char* buf2str(const char *buf, int len)
+{
+      return buf2str_extended(buf, len, NULL);
+}
+static char* get_fru_area_str(char *data, uint32_t *offset)
+{
+      static const char bcd_plus[] = "0123456789 -.:,_";
+      char *str;
+      int len, off, size, i, j, k, typecode;
+      union {
+              uint32_t bits;
+              char chars[4];
+      } u;
+
+      size = 0;
+      off = *offset;
+
+      /* bits 6:7 contain format */
+      typecode = ((data[off] & 0xC0) >> 6);
+
+      // printf("Typecode:%i\n", typecode);
+      /* bits 0:5 contain length */
+      len = data[off++];
+      len &= 0x3f;
+
+      switch (typecode) {
+      case 0: /* 00b: binary/unspecified */
+              /* hex dump -> 2x length */
+              size = (len * 2);
+              break;
+      case 2: /* 10b: 6-bit ASCII */
+              /* 4 chars per group of 1-3 bytes */
+              size = ((((len + 2) * 4) / 3) & ~3);
+              break;
+      case 3: /* 11b: 8-bit ASCII */
+      case 1: /* 01b: BCD plus */
+              /* no length adjustment */
+              size = len;
+              break;
+      }
+
+      if (size < 1) {
+              *offset = off;
+              return NULL;
+      }
+      str = malloc(size + 1);
+      if (str == NULL)
+              return NULL;
+      memset(str, 0, size + 1);
+
+      if (len == 0) {
+              str[0] = '\0';
+              *offset = off;
+              return str;
+      }
+      switch (typecode) {
+      case 0: /* Binary */
+              strncpy(str, buf2str(&data[off], len), len * 2);
+              break;
+
+      case 1: /* BCD plus */
+              for (k = 0; k < len; k++)
+                      str[k] = bcd_plus[(data[off + k] & 0x0f)];
+              str[k] = '\0';
+              break;
+
+      case 2: /* 6-bit ASCII */
+              for (i = j = 0; i < len; i += 3) {
+                      u.bits = 0;
+                      k = ((len - i) < 3 ? (len - i) : 3);
+#if WORDS_BIGENDIAN
+                      u.chars[3] = data[off + i];
+                      u.chars[2] = (k > 1 ? data[off + i + 1] : 0);
+                      u.chars[1] = (k > 2 ? data[off + i + 2] : 0);
+#define CHAR_IDX 3
+#else
+                      memcpy((void *)&u.bits, &data[off + i], k);
+#define CHAR_IDX 0
+#endif
+                      for (k = 0; k < 4; k++) {
+                              str[j++] = ((u.chars[CHAR_IDX] & 0x3f) + 0x20);
+                              u.bits >>= 6;
+                      }
+              }
+              str[j] = '\0';
+              break;
+
+      case 3:
+              memcpy(str, &data[off], len);
+              str[len] = '\0';
+              break;
+      }
+
+      off += len;
+      *offset = off;
+
+      return str;
+}
+
+static char* get_board_extra_field(char *fru_area_board)
+{
+      char *fru_data_field;
+      uint32_t fru_area_board_len;
+      uint32_t i;
+
+      /*
+       * skip first three bytes which specify fru area version,
+       * fru area length and fru board language
+       */
+      i = 3;
+      i += 3; /* skip Mfg. Date / Time */
+      fru_data_field = get_fru_area_str(fru_area_board, &i);
+      free(fru_data_field); /* skip Board Manufacturer */
+      fru_data_field = get_fru_area_str(fru_area_board, &i);
+      free(fru_data_field); /* skip Board Product Name */
+      fru_data_field = get_fru_area_str(fru_area_board, &i);
+      free(fru_data_field); /* skip Board Serial Number */
+      fru_data_field = get_fru_area_str(fru_area_board, &i);
+      free(fru_data_field); /* skip Board Part Number */
+      fru_data_field = get_fru_area_str(fru_area_board, &i);
+      free(fru_data_field); /* skip FRU File ID */
+
+      fru_area_board_len = fru_area_board[1] * 8;
+      /* read board extra field */
+      if ((fru_area_board[i] != 0xc1) && (i < fru_area_board_len))
+              fru_data_field = get_fru_area_str(fru_area_board, &i);
+
+      return fru_data_field;
+}
+
+static char* get_fru_area_board(struct fru_header_t fru_header, char *fru_data)
+{
+      /* board area */
+      if ((fru_header.offset.board * 8) >= sizeof(struct fru_header_t))
+              return &fru_data[fru_header.offset.board * 8];
+
+      return NULL;
+}
+
+
+
+void ast_eth_read_addr_from_fru(int id)
+{
+      unsigned char mac_address[ETH_ALEN];
+      unsigned char mac_address_boardextra[ETH_ALEN_IN_BOARDEXTRA];
+      struct fru_header_t fru_header;
+      char fru_data[FRU_SIZE];
+      char *fru_area_board;
+      char *fru_board_extra_field;
+      char ethaddr_env[24];
+      int valid_mac_addr_in_eeprom;
+      int i,ret = -1;
+      struct udevice *dev;
+
+      /* read fru data */
+    if(set_i2c_bus_num(CONFIG_SPX_FEATURE_I2C_FRU_CHANNEL_ID) == 0)
+    {
+	  ret = i2c_get_cur_bus_chip(CONFIG_SPX_FEATURE_I2C_FRU_ADDR, &dev);
+          if (!ret )
+       	  {
+        	ret = i2c_set_chip_offset_len(dev, CONFIG_SPX_FEATURE_I2C_FRU_ADDR_LEN);
+	  }
+       	  if (!ret)
+	  {
+        	ret = dm_i2c_read(dev, 0, (uchar*)fru_data, FRU_SIZE);		
+          }
+    }
+    memcpy(&fru_header,fru_data,8);
+
+    if (fru_header.version != 1)
+        return;
+	
+      /* get board area */
+      fru_area_board = get_fru_area_board(fru_header, &fru_data[0]);
+      if (!fru_area_board)
+              return;
+
+      /* get board extra field */
+      fru_board_extra_field = get_board_extra_field(fru_area_board);
+      if (!fru_board_extra_field)
+              return;
+
+      if (id == 0) {
+              if (strlen(fru_board_extra_field) < ETH_ALEN_IN_BOARDEXTRA)
+                      return;
+              memcpy(mac_address_boardextra, fru_board_extra_field,
+                              ETH_ALEN_IN_BOARDEXTRA);
+      } else if (id == 1) {
+              if (strlen(fru_board_extra_field) < (ETH_ALEN_IN_BOARDEXTRA * 2) + 1)
+                      return;
+              memcpy(mac_address_boardextra,
+                      &fru_board_extra_field[ETH_ALEN_IN_BOARDEXTRA + 1],
+                      ETH_ALEN_IN_BOARDEXTRA);
+      }
+      hex2dec(&mac_address_boardextra[0], ETH_ALEN_IN_BOARDEXTRA);
+      mac_address[0] = ((mac_address_boardextra[0] & 0x0F) << 4)
+                      | (mac_address_boardextra[1] & 0x0F);
+      mac_address[1] = ((mac_address_boardextra[3] & 0x0F) << 4)
+                      | (mac_address_boardextra[4] & 0x0F);
+      mac_address[2] = ((mac_address_boardextra[6] & 0x0F) << 4)
+                      | (mac_address_boardextra[7] & 0x0F);
+      mac_address[3] = ((mac_address_boardextra[9] & 0x0F) << 4)
+                      | (mac_address_boardextra[10] & 0x0F);
+      mac_address[4] = ((mac_address_boardextra[12] & 0x0F) << 4)
+                      | (mac_address_boardextra[13] & 0x0F);
+      mac_address[5] = ((mac_address_boardextra[15] & 0x0F) << 4)
+                      | (mac_address_boardextra[16] & 0x0F);
+
+      valid_mac_addr_in_eeprom = 0;
+     for (i = 0; i < ETH_ALEN; i++) {
+              if (mac_address[i] != 0xFF) {
+                      valid_mac_addr_in_eeprom = 1;
+              }
+      }
+
+      /* set MAC address to ethernet module */
+      if (valid_mac_addr_in_eeprom) {
+              sprintf(ethaddr_env, "%02X:%02X:%02X:%02X:%02X:%02X",
+                      mac_address[0],
+                      mac_address[1],
+                      mac_address[2],
+                      mac_address[3],
+                      mac_address[4],
+                      mac_address[5]);
+              if (id == 0) {
+                      env_set("ethaddr", ethaddr_env);
+              } else if (id == 1) {
+                      env_set("eth1addr", ethaddr_env);
+              }
+  //            saveenv();
+      }
+}
+#endif
+
+
diff -Naur uboot/oem/Makefile uboot_new/oem/Makefile
--- uboot/oem/Makefile	2021-07-23 14:07:02.307418773 +0530
+++ uboot_new/oem/Makefile	2021-07-23 15:48:38.444894297 +0530
@@ -18,5 +18,9 @@
 endif
 ifeq ($(CONFIG_SPX_FEATURE_WRITE_MAC_TO_EEPROM_SUPPORT),"YES")
 obj-y += ami/mac_eeprom/
+else 
+ifeq ($(CONFIG_SPX_FEATURE_WRITE_MAC_TO_FRU_SUPPORT),"YES")
+obj-y += ami/mac_eeprom/
+endif
 endif
 obj-y += ami/porting/
