--- uboot/drivers/spi/aspeed_spi.c	2021-10-18 16:40:27.341907543 +0530
+++ uboot_new/drivers/spi/aspeed_spi.c	2021-10-18 16:47:59.410119722 +0530
@@ -856,6 +856,8 @@
 		seg_addr = G6_SEGMENT_ADDR_VALUE((u32)flash->ahb_base,
 					      (u32)flash->ahb_base + flash->ahb_size);
 	} else {
+		flash->ahb_base = flash->cs ? (void *)SEGMENT_ADDR_END(readl(&priv->regs->segment_addr[flash->cs -1])) :
+                                	flash->ahb_base;
 		seg_addr = SEGMENT_ADDR_VALUE((u32)flash->ahb_base,
 						  (u32)flash->ahb_base + flash->ahb_size);
 		//AMI check address overlap and correct address if overlap
--- uboot/include/configs/aspeed-common.h	2021-04-22 13:36:05.345487624 +0530
+++ uboot_new/include/configs/aspeed-common.h	2021-04-22 13:07:32.403238956 +0530
@@ -107,4 +107,12 @@
  */
 #define PHY_ANEG_TIMEOUT		800
 #define CONFIG_PHY_GIGE
+
+/*----------------------------------------------------------------------------*/
+/*          Flash  Configuration                                              */
+/*----------------------------------------------------------------------------*/
+#define CONFIG_SYS_FLASH_BASE          0x20000000
+#define CONFIG_SYS_MAX_FLASH_BANKS             2
+
+/*----------------------------------------------------------------------------*/
 #endif	/* __ASPEED_COMMON_CONFIG_H */
--- uboot/oem/ami/fmh/ast_wdt.c	2021-04-22 13:36:05.353487697 +0530
+++ uboot_new/oem/ami/fmh/ast_wdt.c	2021-04-22 13:10:41.113090544 +0530
@@ -31,9 +31,9 @@
 #define WDT2_SECOND_BOOT_CODE   0x80                    // Enable Second Boot Code upon reset
 #define WDT_CUR_BOOTSRC_MASK    0x00000002
 
-#ifdef CONFIG_SPX_FEATURE_HW_FAILSAFE_BOOT 
-extern unsigned char broken_spi_banks;// specify the number of broken SPI flash bank
-#endif
+//#ifdef CONFIG_SPX_FEATURE_HW_FAILSAFE_BOOT 
+//extern unsigned char broken_spi_banks;// specify the number of broken SPI flash bank
+//#endif
 
 int Enable_watchdog(unsigned long *wdt_timeout_status)
 {
@@ -52,17 +52,17 @@
 
        /* Reading the Watchdog Timeout event counter*/
        *wdt_timeout_status = *((volatile unsigned long *)(WDT2_TIMEOUT_STAT_REG));
-#ifdef CONFIG_SPX_FEATURE_GLOBAL_DUAL_IMAGE_SUPPORT
-       /*clear boot source to restore address mapping... */
-#ifdef CONFIG_SPX_FEATURE_HW_FAILSAFE_BOOT
-		if ((broken_spi_banks == 2) && (*wdt_timeout_status & WDT_CUR_BOOTSRC_MASK))
-			broken_spi_banks = 1;
-		else if (broken_spi_banks == 0)
-#endif
-       {
+//#ifdef CONFIG_SPX_FEATURE_GLOBAL_DUAL_IMAGE_SUPPORT
+//       /*clear boot source to restore address mapping... */
+//#ifdef CONFIG_SPX_FEATURE_HW_FAILSAFE_BOOT
+//		if ((broken_spi_banks == 2) && (*wdt_timeout_status & WDT_CUR_BOOTSRC_MASK))
+//			broken_spi_banks = 1;
+//		else if (broken_spi_banks == 0)
+//#endif
+//       {
            *((volatile unsigned long *)(WDT2_CLR_TIMEOUT_STAT_REG)) = 0x00000077 ; 
-       }
-#endif
+//       }
+//#endif
 
 #ifdef CONFIG_SPX_FEATURE_HW_FAILSAFE_BOOT
        /* Enabling the Second Boot code upon reset */
@@ -74,11 +74,11 @@
        /* Also set the Flag to reset the CPU on Timeout */
        *((volatile unsigned long *)(WDT2_CONTROL_REG)) |= (WDT_RESET_SYSTEM | WDT_ENABLE);
 
-#ifdef CONFIG_SPX_FEATURE_HW_FAILSAFE_BOOT 
-	if (broken_spi_banks == 1) 
-           return 1;// if bank#0 is broken then dont clear address mapping and bootimage 1 
-       else 
-#endif
+//#ifdef CONFIG_SPX_FEATURE_HW_FAILSAFE_BOOT 
+//	if (broken_spi_banks == 1) 
+//           return 1;// if bank#0 is broken then dont clear address mapping and bootimage 1 
+//       else 
+//#endif
            return (((*wdt_timeout_status) & (WDT_CUR_BOOTSRC_MASK)) >> 1 ) + 1 ;
 }
 
@@ -96,10 +96,10 @@
        printf("Disabling Watchdog 2 Timer\n");
        *((volatile unsigned long *)(WDT2_CONTROL_REG)) &= ~(WDT_RESET_SYSTEM | WDT_ENABLE);
     }
-#ifdef CONFIG_SPX_FEATURE_HW_FAILSAFE_BOOT
-	if ((broken_spi_banks == 2) && (*((volatile unsigned long *)(WDT2_TIMEOUT_STAT_REG)) & WDT_CUR_BOOTSRC_MASK))
-		broken_spi_banks = 1;
-#endif
+//#ifdef CONFIG_SPX_FEATURE_HW_FAILSAFE_BOOT
+//	if ((broken_spi_banks == 2) && (*((volatile unsigned long *)(WDT2_TIMEOUT_STAT_REG)) & WDT_CUR_BOOTSRC_MASK))
+//		broken_spi_banks = 1;
+//#endif
     return 0;
 }

--- uboot/oem/ami/fmh/cmd_fmh.c	2021-11-08 16:10:42.968668038 +0530
+++ uboot_new/oem/ami/fmh/cmd_fmh.c	2021-11-08 17:40:52.232903382 +0530
@@ -523,7 +523,7 @@
 int
 GetFMHSectorLocationSize(char * Name, unsigned long * Location, unsigned long * Size)
 {
-#if 1
+#if 0
         //flash_info_t *flinfo;
 		struct spi_flash *flash;
         unsigned long SectorSize=CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE;
@@ -601,7 +601,7 @@
 
         return (i >= SectorCount) ? -1 : 0;
 #endif
-
+return -1 ;
 }
 
 /****************************************************************************/
@@ -815,11 +815,17 @@
 	unsigned long i=0,SectorSize=CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE;
 	unsigned long SectorCount=0,flashsize=0;
 	unsigned long watchdog_reset_status = 0;
-	u8 imgIndex=0,img1_presence=0,img2_presence=0;
+	u8 img1_presence=0,img2_presence=0;
 	FMH	*fmh = NULL;
 	MODULE_INFO *mod = NULL;
+#ifdef CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
+        struct spi_flash *flash[CONFIG_SYS_MAX_FLASH_BANKS]={NULL};
+        VersionInfo firmware_ver[CONFIG_SYS_MAX_FLASH_BANKS], platform_ver[CONFIG_SYS_MAX_FLASH_BANKS];
+#else
+        u8 imgIndex=0;
 	VersionInfo firmware_ver[2], platform_ver[2];
-	struct spi_flash *flash;
+        struct spi_flash *flash = NULL;
+#endif
 #ifdef CONFIG_SPX_FEATURE_FAIL_SAFE_BOOTING
 #ifdef CONFIG_SPX_FEATURE_SW_FAILSAFE_BOOT
     Enable_watchdog(&watchdog_reset_status);
@@ -829,6 +835,88 @@
 #endif
 #endif
 
+#if defined CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
+    int cs=0;
+    memset(&platform_ver,0,sizeof(platform_ver));
+    for(cs=0; cs<CONFIG_SYS_MAX_FLASH_BANKS ; cs++)
+    {
+       flash[cs]= spi_flash_probe(CONFIG_ENV_SPI_BUS, cs,
+                       CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
+       if (flash[cs] == NULL)
+       {
+               printf("\nspi_flash_probe failed for cS=%d\n",cs);
+               continue;
+       }
+
+       flashsize = flash[cs]->size;
+       SectorSize = 0x10000;
+       SectorCount = flashsize/SectorSize;
+
+       /* Scan through the flash for FMH */
+       for (i=0;i<SectorCount;)
+       {
+
+               if( (i*SectorSize) >= CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE ) { break; }
+
+               /* Check if FMH found at this sector */
+               fmh = ScanforFMH(flash[cs],(i*SectorSize),SectorSize);
+               if (fmh == NULL)
+               {
+                       i++;
+                       continue;
+               }
+               /* Extract Module information and module name */
+               mod = &(fmh->Module_Info);
+
+               /* if firmware contains platform module need to consider*/
+               if( (mod->Module_Type) == MODULE_JFFS2)
+               {
+                       if( strncmp((char *)mod->Module_Name,"platform",8)==0 )
+                       {
+                               platform_ver[cs].major_ver = mod->Module_Ver_Major;
+                               platform_ver[cs].minor_ver = mod->Module_Ver_Minor;
+                               if( FMH_MAJOR == 1 && FMH_MINOR == 6 )
+                               {
+                                       strncpy((char *)platform_ver[cs].aux_ver,(char *)mod->Module_Ver_Aux, 2);
+                               }
+                               else if(FMH_MAJOR == 1 && FMH_MINOR >= 7)
+                               {
+                                       strncpy((char *)platform_ver[cs].aux_ver,(char *)mod->Module_Ver_Aux,sizeof(mod->Module_Ver_Aux));
+                               }
+                       }
+               }
+
+
+               if( (mod->Module_Type) == MODULE_FMH_FIRMWARE)
+               {
+                       firmware_ver[cs].major_ver = mod->Module_Ver_Major;
+                       firmware_ver[cs].minor_ver = mod->Module_Ver_Minor;
+                       if( FMH_MAJOR == 1 && FMH_MINOR == 6 )
+                       {
+                               strncpy((char *)firmware_ver[cs].aux_ver,(char *)mod->Module_Ver_Aux, 2);
+                       }
+                       else if(FMH_MAJOR == 1 && FMH_MINOR >= 7)
+                       {
+                               strncpy((char *)firmware_ver[cs].aux_ver,(char *)mod->Module_Ver_Aux,sizeof(mod->Module_Ver_Aux));
+                       }
+                       if( cs == IMG1_index_val)
+                               img1_presence = 1;
+                       if( cs == IMG2_index_val)
+                               img2_presence = 1;
+               }
+               i++;
+
+//             if ((i*SectorSize) >= CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE)//Image Size
+//             {
+//                     if(mod->Module_Type == FIRMWARE_INFO_TYPE)
+//                     {
+//                             imgIndex++;
+//                     }
+//             }
+       }
+
+    }
+#else
     flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
                         CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
     if (flash == NULL)
@@ -918,8 +1006,8 @@
 				}
 			}
 		}
-		
-        
+#endif
+
         /* check whether reboot caused by watchdog modules reset */
 		if(watchdog_reset_status)
 		{
@@ -1206,12 +1294,18 @@
     else//for image2
     {
 #ifdef CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
-        flash = flashspi[1];
-        StartingSector=flash->size;
-        SectorCount=StartingSector+flash->size;
-        startaddress=CE1_ADDRESS_SEGMENT;
-        StartingSector/=SectorSize;
-        SectorCount/=SectorSize;
+    	flash =NULL;
+    	flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, 1,
+    			CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
+    	if (flash == NULL)
+    	{
+    		puts("\nspi_flash_probe failed");
+    		hang();
+    	}
+    	SectorCount = (CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE/SectorSize);
+    	StartingSector = 0;
+    	startaddress=CONFIG_SYS_FLASH_BASE + CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE ;
+
 #else
         StartingSector = (CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE/SectorSize);
         SectorCount = ( (2*CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE)/SectorSize );
--- uboot/oem/ami/fmh/fmhcore.c	2021-04-22 13:36:05.365487804 +0530
+++ uboot_new/oem/ami/fmh/fmhcore.c	2021-04-22 13:25:21.838265872 +0530
@@ -181,15 +181,15 @@
 	FMH *fmh;
 	ALT_FMH *altfmh;
 	unsigned long FMH_Offset;
-#if defined CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
+//#if defined CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
+//	MODULE_INFO *mod;
+//	unsigned long StartAddr = (unsigned long)SectorAddr;
+//	unsigned long SecStartAddr = 0;
+//	unsigned long i = 0;
+//#elif defined CONFIG_SPX_FEATURE_CONTIGIOUS_SPI_MEMORY
 	MODULE_INFO *mod;
 	unsigned long StartAddr = (unsigned long)SectorAddr;
-	unsigned long SecStartAddr = 0;
-	unsigned long i = 0;
-#elif defined CONFIG_SPX_FEATURE_CONTIGIOUS_SPI_MEMORY
-	MODULE_INFO *mod;
-	unsigned long StartAddr = (unsigned long)SectorAddr;
-#endif
+//#endif
     int ret=0;
 
 
@@ -221,24 +221,24 @@
 	if (FMH_Offset == INVALID_FMH_OFFSET)
 		return NULL;
 	
-#if defined CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
-	mod = &(fmh->Module_Info);
-	for(i = 0; i < CONFIG_SPX_FEATURE_SECONDARY_IMAGE_SPI; i++)
-		SecStartAddr += flash->size;
-		//SecStartAddr += flash_info[i].size;
-
-       
-	if ((StartAddr - le32_to_host(mod->Module_Location)) >= SecStartAddr)
-	{
-		//flash_read((ulong)CONFIG_SYS_FLASH_BASE+SecStartAddr+FMH_Offset, sizeof(FMH),(char *)&fmh_buffer);
-		ret=spi_flash_read(flash,le32_to_host(mod->Module_Location)+SecStartAddr+FMH_Offset, sizeof(FMH),(void *)&fmh_buffer);
-		if(ret)
-		{
-			puts("Error in reading SPI\n");
-		}
-	}	
-	else
-#elif defined CONFIG_SPX_FEATURE_CONTIGIOUS_SPI_MEMORY
+//#if defined CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
+//	mod = &(fmh->Module_Info);
+//	for(i = 0; i < CONFIG_SPX_FEATURE_SECONDARY_IMAGE_SPI; i++)
+//		SecStartAddr += flash->size;
+//		//SecStartAddr += flash_info[i].size;
+//
+//       
+//	if ((StartAddr - le32_to_host(mod->Module_Location)) >= SecStartAddr)
+//	{
+//		//flash_read((ulong)CONFIG_SYS_FLASH_BASE+SecStartAddr+FMH_Offset, sizeof(FMH),(char *)&fmh_buffer);
+//		ret=spi_flash_read(flash,le32_to_host(mod->Module_Location)+SecStartAddr+FMH_Offset, sizeof(FMH),(void *)&fmh_buffer);
+//		if(ret)
+//		{
+//			puts("Error in reading SPI\n");
+//		}
+//	}	
+//	else
+//#elif defined CONFIG_SPX_FEATURE_CONTIGIOUS_SPI_MEMORY
 	mod = &(fmh->Module_Info);
 	if ((StartAddr - le32_to_host(mod->Module_Location)) >= CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE)
 	{
@@ -250,7 +250,7 @@
 		}
 	}	
 	else
-#endif
+//#endif
 
     //flash_read((ulong)CONFIG_SYS_FLASH_BASE+FMH_Offset,sizeof(FMH),(char *)&fmh_buffer);
     ret = spi_flash_read(flash, FMH_Offset, sizeof(FMH), (void *)&fmh_buffer);
