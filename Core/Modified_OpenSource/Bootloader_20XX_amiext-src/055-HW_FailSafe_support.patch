--- old_uboot/oem/ami/fmh/cmd_fmh.c	2021-11-02 10:16:56.391438968 +0530
+++ uboot/oem/ami/fmh/cmd_fmh.c	2021-11-01 19:53:05.557898246 +0530
@@ -240,7 +240,12 @@
 ListFMH(void)
 {
     //unsigned char buf[64*1024] = {0};
-    struct spi_flash *flash;
+#ifdef CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
+    struct spi_flash *flash[CONFIG_SPX_FEATURE_GLOBAL_FLASH_BANKS]= {NULL};
+#else
+    struct spi_flash *flash=NULL;
+#endif
+
     unsigned long flashsize=0,SectorCount=0;
     unsigned long SectorSize=0;
     int i=0;
@@ -248,14 +253,86 @@
     unsigned char Name[9] = {0};
     MODULE_INFO *mod;
     long SkipSize;
-	
-    flash = spi_flash_probe((CONFIG_ENV_SPI_BUS), (CONFIG_ENV_SPI_CS+1),
-                        CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
-    if (flash == NULL) 
-        puts("\nListFMH spi_flash_probe failed CE1");
-	else 
-		flashsize += flash->size;
+#ifdef CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
+    int cs=0;
+    for(cs=0; cs < CONFIG_SPX_FEATURE_GLOBAL_FLASH_BANKS ; cs++)
+    {
+        flash[cs] = spi_flash_probe(CONFIG_ENV_SPI_BUS, cs,
+                            CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
+        if (flash[cs] == NULL)
+        {
+            printf("\nspi_flash_probe failed on cs = %d\n",cs);
+            continue;
+        }
+
+        flashsize = flash[cs]->size;
+        SectorSize = 0x10000; //flash->erase_size;//0x10000;//flash->sector_size;
+        SectorCount = flashsize/SectorSize;
+        printf("chip %d Flash size 0x%lx Sector size 0x%lx SectorCount 0x%lx\n",cs,flashsize,SectorSize,SectorCount);
+
+        for(i=0;i<SectorCount;)
+        {
+            #if 0
+            fmh = ScanforFMH((unsigned char *)(CONFIG_SYS_FLASH_BASE+(i*SectorSize)),SectorSize);
+            if (fmh == NULL)
+            {
+                i++;
+                continue;
+            }
+            #endif
 
+            fmh = ScanforFMH(flash[cs],((i*SectorSize)),SectorSize);
+            if (fmh == NULL)
+            {
+                i++;
+                continue;
+            }
+
+
+            /* Print Information about the FMH and its module */
+            printf("\nFMH Located at 0x%08lx of Size 0x%08x\n",
+                    (unsigned long)((i*SectorSize)),le32_to_host(fmh->FMH_AllocatedSize));
+
+            mod = &(fmh->Module_Info);
+            strncpy((char *)Name,(char *)mod->Module_Name,8);
+            Name[8]=0;
+            printf("Name    : %s\n",Name);
+
+            if( FMH_MAJOR==1 && FMH_MINOR>=7 )
+                printf("Ver     : %d.%02d.%.6s\n",mod->Module_Ver_Major,mod->Module_Ver_Minor,mod->Module_Ver_Aux);
+            else if( FMH_MAJOR==1 && FMH_MINOR==6 )
+                printf("Ver     : %d.%02d.%.2s\n",mod->Module_Ver_Major,mod->Module_Ver_Minor,mod->Module_Ver_Aux);
+            else
+                printf("Ver     : %d.%02d\n",mod->Module_Ver_Major,mod->Module_Ver_Minor);
+
+            printf("Type    : 0x%04x\n",le16_to_host(mod->Module_Type));
+            printf("Flags   : 0x%04x\n",le16_to_host(mod->Module_Flags));
+            printf("Size    : 0x%08x\n",le32_to_host(mod->Module_Size));
+
+            if ((fmh->FMH_Ver_Major == 1) && (fmh->FMH_Ver_Minor >= 8))
+                printf("Location: 0x%08x\n", le32_to_host(mod->Module_Location));
+            else
+                printf("Location: 0x%08lx\n",((i*SectorSize)) + le32_to_host(mod->Module_Location));
+
+            printf("LoadAddr: 0x%08x\n",le32_to_host(mod->Module_Load_Address));
+            printf("--------------------------------------------------\n");
+
+
+            if (i*SectorSize > le32_to_host(mod->Module_Location)) /* Special case of AltFMH (FMH location > Module_Location */
+                SkipSize=SectorSize;
+            else
+                /* Skip the Sectors occupied by the Module */
+                SkipSize = le32_to_host(fmh->FMH_AllocatedSize);
+
+            while ((SkipSize > 0) && (i < SectorCount))
+            {
+                SkipSize-=SectorSize;
+                i++;
+            }
+
+        } /* sector */
+    }
+#else
     flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
                         CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
     if (flash == NULL) 
@@ -264,10 +341,9 @@
         hang();
     }
 
-    flashsize += flash->size;
+    flashsize = flash->size;
     SectorSize = 0x10000; //flash->erase_size;//0x10000;//flash->sector_size;
     SectorCount = flashsize/SectorSize;
-   printf("Flash size 0x%lx Sector size 0x%lx SectorCount 0x%lx\n",flashsize,SectorSize,SectorCount);
 
     for(i=0;i<SectorCount;)
     {
@@ -331,7 +407,7 @@
     
     } /* sector */
 
-
+#endif
 #if 0
     if(0)
     {
@@ -1679,6 +1755,12 @@
    printf("Error locating Kernel. Reset the board\n");
 #endif
 
+#ifdef CONFIG_SPX_FEATURE_HW_FAILSAFE_BOOT
+	if (broken_spi_banks == 0)
+	{
+		broken_spi_banks = 1;
+	}
+#endif
 	UpdateFirmware();
 	/* Module Type JFFS and JFFS2 are File System  - Not executable */
 	/* Module Type FIRMWARE is a information module- Not Executable */
